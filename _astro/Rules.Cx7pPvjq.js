import{g as t,e as x,i,b as e,S as w,M as g,I,h as A,j as k,t as a,d as P,c as T,f as $,r as f,k as C}from"./web.CtQgyOyX.js";var N=a("<div>"),O=a("<span class=stack-desc>"),F=a("<div class=stack-top><span class=stack-item></span><strong>TOP"),R=a("<span class=stack-item>"),E=a("<h1>"),L=a("<br>");function h(l){let n=l.stack.findIndex(s=>s===null)-1;n===-2&&(n=l.stack.length-1);const o=n===-1?"stack empty":"stack";return[(()=>{var s=t(N);return x(s,o),i(s,e(I,{get each(){return l.stack},children:(c,p)=>e(w,{get children(){return[e(g,{when:p===n,get children(){var r=t(F),d=r.firstChild;return i(d,()=>c()??" "),r}}),e(g,{when:p!==n,get children(){var r=t(R);return i(r,()=>c()??" "),r}})]}})})),s})(),(()=>{var s=t(O);return i(s,()=>l.desc),s})()]}function b(l){const n=A(()=>l.children);return[(()=>{var o=t(E);return i(o,()=>l.title),o})(),t(L),k(n)]}var M=a("<p>Hello, newcomer! No matter if you are familar to the stack data structure or not, you can still easily start playing after reading rules in a few minutes! Let's quickly introduce the most important concept in this game: <strong>Stacks</strong>!"),H=a("<p>Stacks are ordered collections of elements, in this game, those elements will be different numbers and the top will be the right most element. What special about stacks, is that stacks follow a rule called <strong>FIFO</strong> (First In First Out). Basically, this rule limits us to only operate with the top element, and allows us to do two things to a stack at the same time. One called <strong>Push</strong> that push a element on the top of the stack."),B=a("<p>For example, if we push a '7' to the stack above, it will become:"),W=a("<p>Another operation is called <strong>Pop</strong>. This operation take the top element out. If we pop the original stack before pushing, it will become:"),j=a("<p>Now, you have known how stacks work. Let's introduce the capacity of stack!"),q=a("<p>In this game, the stack have a <strong>capacity</strong> of 10. A stack can only hold 10 elements at the same time. Stacks of capacity 10 are shown below."),_=a("<br>"),K=a("<p>If we push another element onto a full stack, the stack <strong>overflows</strong>. It is called Stack Overflow and often considered bad in computer science. However, in this game, your aim is to let the stack overflows! We will go into this later. Let's talk about operations now.");const U=()=>e(b,{title:"RULES",get children(){return[t(M),e(h,{stack:[1,2,-3,5,3],desc:"A simple stack."}),t(H),t(B),e(h,{stack:[1,2,-3,5,3,7],desc:"The stack after pushing."}),t(W),e(h,{stack:[1,2,-3,5],desc:"Original stack after popping."})]}}),Y=()=>e(b,{title:"STACK CAPACITY",get children(){return[t(j),t(q),e(h,{stack:[1,2,3,4,5,6,7,null,null,null],desc:"A stack which has length of 7 and capacity of 10."}),t(_),e(h,{stack:[null,null,null,null,null,null,null,null,null,null],desc:"A stack which has length of 0 (empty) and capacity of 10."}),t(_),e(h,{stack:[9,8,7,6,5,4,3,2,1,0],desc:"A stack which has length of 9 (full) and capacity of 10."}),t(K)]}});var z=a("<button id=page-button>Previous page"),D=a("<a id=page-button href=..>Back to lobby"),G=a("<button id=page-button>Next page"),J=a("<div id=page-column><!$><!/><!$><!/>");function V(){const[l,n]=T(0),o=[e(U,{}),e(Y,{})],s=k(()=>o[l()]);return[k(s),(()=>{var c=t(J),p=c.firstChild,[r,d]=$(p.nextSibling),v=r.nextSibling,[y,S]=$(v.nextSibling);return i(c,e(C,{get when(){return l()!==0},get children(){var u=t(z);return u.$$click=()=>{n(m=>m-1),document.body.scrollTo({top:0,behavior:"smooth"})},f(),u}}),r,d),i(c,e(w,{get children(){return[e(g,{get when(){return l()===o.length-1},get children(){return t(D)}}),e(g,{get when(){return l()!==o.length-1},get children(){var u=t(G);return u.$$click=()=>{n(m=>m+1),document.body.scrollTo({top:0,behavior:"smooth"})},f(),u}})]}}),y,S),c})()]}P(["click"]);export{V as default};
