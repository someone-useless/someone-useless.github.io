import{g as e,h as x,i,c as l,j as y,M as d,I as v,k as I,b as w,t,d as T,a as R,f,r as $,S as H}from"./web.Bo3YaodJ.js";var C=t("<div>"),E=t("<span class=stack-desc>"),N=t("<div class=stack-top><span class=stack-item></span><strong>TOP"),O=t("<span class=stack-item>"),F=t("<h1>"),U=t("<br>"),L=t("<div class=card>"),M=t("<span class=operation>");function n(a){let o=a.stack.findIndex(s=>s===null)-1;o===-2&&(o=a.stack.length-1);const r=o===-1?"stack empty":"stack";return[(()=>{var s=e(C);return x(s,r),i(s,l(v,{get each(){return a.stack},children:(u,m)=>l(y,{get children(){return[l(d,{when:m===o,get children(){var c=e(N),g=c.firstChild;return i(g,()=>u()??" "),c}}),l(d,{when:m!==o,get children(){var c=e(O);return i(c,()=>u()??" "),c}})]}})})),s})(),(()=>{var s=e(E);return i(s,()=>a.desc),s})()]}function p(a){const o=I(()=>a.children);return[(()=>{var r=e(F);return i(r,()=>a.title),r})(),e(U),w(o)]}function b(a){return(()=>{var o=e(L);return i(o,l(v,{get each(){return a.opers},children:r=>(()=>{var s=e(M);return i(s,r),s})()})),o})()}var W=t("<p>Hello, newcomer! No matter if you are familar to the stack data structure or not, you can still easily start playing after reading rules in a few minutes! Let's quickly introduce the most important concept in this game: <strong>Stacks</strong>!"),j=t("<p>Stacks are ordered collections of elements, in this game, those elements will be different numbers and the top will be the right most element. What special about stacks, is that stacks follow a rule called <strong>FIFO</strong> (First In First Out). Basically, this rule limits us to only operate with the top element, and allows us to do two things to a stack at the same time. One called <strong>Push</strong> that push a element on the top of the stack."),B=t("<p>For example, if we push a '7' to the stack above, it will become:"),Y=t("<p>Another operation is called <strong>Pop</strong>. This operation take the top element out. If we pop the original stack before pushing, it will become:"),q=t("<p>Now, you have known how stacks work. Let's introduce the capacity of stack!"),D=t("<p>In this game, the stack have a <strong>capacity</strong> of 10. A stack can only hold 10 elements at the same time. Stacks of capacity 10 are shown below."),_=t("<br>"),G=t("<p>If we push another element onto a full stack, the stack <strong>overflows</strong>. It is called Stack Overflow and often considered bad in computer science. However, in this game, your aim is to let the stack overflows! We will go into this later. Let's talk about operations now."),K=t("<p>We have introduced two operations before, Push and Pop. They are basic operation that are allowed in computer science. However, in order to let this game be more fun, 3 more operations will be added! One is called <strong>Reverse</strong>. It simply reverse the whole stack. Suppose we have following stack:"),V=t("<p>After reversing it, it will look like this:"),z=t("<p>Another operation is <strong>Add</strong>. It add a number to the top element. Notice that it is different from pushing! For example, if we are going to add 3 to the stack, the stack becomes:"),J=t("<p>The last operation is called <strong>Negate</strong>. It negate the top element, or mathematically speaking, it multiplied the top element by -1. For example, if we negate the stack above, it becomes:"),Q=t("<p>If we negate it once more, it becomes the original stack!"),X=t("<p>Let's talk about cards! Firstly, we will have a empty stack."),Z=t("<p>Each turn, player will have 3 cards to choose. <strong>Cards</strong> are collections of 1-4 operation(s). Suppose a player use the following card:"),ee=t("<p>After playing this card, the stack becomes:"),te=t("<p>Why? Let's take a closer look into how cards work!"),le=t("<p>Cards execute their operations <strong>from top to the bottom</strong>. Therefore, the card will first execute 'PUSH -1'. After pushing -1, the stack becomes:"),ne=t("<p>After that, the card execute 'PUSH 2'."),ae=t("<p>Finally, we reverse the whole stack!"),oe=t("<p>Talking about the actual gameplay, every player will have 10 points at start. You can consider this as your health, since if you lose all your points, you lose! The only way to win is to defeat other players! But how? Remember overflows that we have just talked about? They are how you get points and defeat other players. Consider the following stack:"),se=t("<p>If a player use this card: "),re=t("<p>After pushing 7, the stack are already full!"),ie=t("<p>If we push 1 into the stack, the stack will overflow! Overflowing clears the whole stack and the <strong>overflower</strong> (the one who overflows the stack) get points same as the top element. Each player except the overflower would lose points same as the bottom element. In this scenario, the overflower will get 7 points, and other players will lose 2 points. Notice that the element that we push would got disposed!"),ce=t("<p>After overflowing, the card execute the last operation: 'PUSH 2'."),ue=t("<p>That's all! Hope you would enjoy this game!");const he=()=>l(p,{title:"RULES",get children(){return[e(W),l(n,{stack:[1,2,-3,5,3],desc:"A simple stack."}),e(j),e(B),l(n,{stack:[1,2,-3,5,3,7],desc:"The stack after pushing."}),e(Y),l(n,{stack:[1,2,-3,5],desc:"Original stack after popping."})]}}),pe=()=>l(p,{title:"STACK CAPACITY",get children(){return[e(q),e(D),l(n,{stack:[1,2,3,4,5,6,7,null,null,null],desc:"A stack which has length of 7 and capacity of 10."}),e(_),l(n,{stack:[null,null,null,null,null,null,null,null,null,null],desc:"A stack which has length of 0 (empty) and capacity of 10."}),e(_),l(n,{stack:[9,8,7,6,5,4,3,2,1,0],desc:"A stack which has length of 9 (full) and capacity of 10."}),e(G)]}}),me=()=>l(p,{title:"OPERATIONS",get children(){return[e(K),l(n,{stack:[1,2,3,4,5,null,null,null,null,null]}),e(V),l(n,{stack:[5,4,3,2,1,null,null,null,null,null]}),e(z),l(n,{stack:[5,4,3,2,4,null,null,null,null,null]}),e(J),l(n,{stack:[5,4,3,2,-4,null,null,null,null,null]}),e(Q),l(n,{stack:[5,4,3,2,4,null,null,null,null,null]})]}}),de=()=>l(p,{title:"CARDS",get children(){return[e(X),l(n,{stack:[null,null,null,null,null,null,null,null,null],desc:"Initial stack."}),e(Z),l(b,{opers:["PUSH -1","PUSH 2","REVERSE"]}),e(ee),l(n,{stack:[2,-1,null,null,null,null,null,null,null,null]}),e(te),e(le),l(n,{stack:[-1,null,null,null,null,null,null,null,null,null]}),e(ne),l(n,{stack:[-1,2,null,null,null,null,null,null,null,null]}),e(ae),l(n,{stack:[2,-1,null,null,null,null,null,null,null,null]})]}}),ge=()=>l(p,{title:"GAME",get children(){return[e(oe),l(n,{stack:[2,-3,9,2,3,-1,0,5,4,null]}),e(se),l(b,{opers:["PUSH 7","PUSH 1","PUSH 2"]}),e(re),l(n,{stack:[2,-3,9,2,3,-1,0,5,4,7]}),e(ie),l(n,{stack:[null,null,null,null,null,null,null,null,null,null]}),e(ce),l(n,{stack:[2,null,null,null,null,null,null,null,null,null]}),e(ue)]}});var ke=t("<button id=page-button>Previous page"),we=t("<a id=page-button href=..>Back to lobby"),fe=t("<button id=page-button>Next page"),$e=t("<div id=page-column><!$><!/><!$><!/>");function ye(){const[a,o]=R(0),r=[he,pe,me,de,ge],s=w(()=>r[a()]);return[w(s),(()=>{var u=e($e),m=u.firstChild,[c,g]=f(m.nextSibling),S=c.nextSibling,[P,A]=f(S.nextSibling);return i(u,l(H,{get when(){return a()!==0},get children(){var h=e(ke);return h.$$click=()=>{o(k=>k-1),document.body.scrollTo({top:0,behavior:"smooth"})},$(),h}}),c,g),i(u,l(y,{get children(){return[l(d,{get when(){return a()===r.length-1},get children(){return e(we)}}),l(d,{get when(){return a()!==r.length-1},get children(){var h=e(fe);return h.$$click=()=>{o(k=>k+1),document.body.scrollTo({top:0,behavior:"smooth"})},$(),h}})]}}),P,A),u})()]}T(["click"]);export{ye as default};
